		SIDEGAP = BOARDWIDTH/16;
		TOPGAP = BOARDHEIGHT/12;
		BRICKWIDTHGAP = (BOARDWIDTH - (SIDEGAP*2))/NUMCOLUMNS;
		BRICKHEIGHTGAP = (BOARDWIDTH - (TOPGAP))/NUMROWS;
		int totalwidth = BOARDWIDTH - (SIDEGAP * 2) - (BRICKWIDTHGAP * (NUMCOLUMNS - 1));
		int totalheight = (BOARDHEIGHT/2) - TOPGAP - (BRICKHEIGHTGAP * (NUMROWS - 1));
		BRICKWIDTH = totalwidth/NUMCOLUMNS;
		BRICKHEIGHT = totalheight/NUMROWS;
		
		PADDLEWIDTH = BOARDWIDTH/8;
		PADDLEHEIGHT = BOARDHEIGHT/24;
		
		BALLRADIUS = (BOARDWIDTH * BOARDHEIGHT)/96000;
		

import javax.swing.JFrame;

public class Main {
		public static void main(String[] args) {
			JFrame frame = new JFrame("Java 2D Skeleton");
			//frame.add(new World());
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setSize(800, 600);
			frame.setLocationRelativeTo(null);
			frame.setVisible(true);
		}
}

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;

public class Brick {
	
	public int columnIndex;
	public int rowIndex;
	public int x;
	public int y;
	public int width;
	public int height;
	public Color brickColor;
	public Boolean collidable;
	public Rectangle gBrick;
	
	public Brick(int columnIndex, int rowIndex, Boolean collidable){
		this.columnIndex = columnIndex;
		this.rowIndex = rowIndex;
		this.width = Constants.BRICKWIDTH;
		this.height = Constants.BRICKHEIGHT;
		x = Constants.SIDEGAP + (columnIndex * this.width) + (columnIndex * Constants.BRICKWIDTHGAP);
		y = Constants.TOPGAP + (rowIndex * this.height) + (rowIndex * Constants.BRICKHEIGHTGAP);
		this.width = Constants.BRICKWIDTH;
		this.height = Constants.BRICKHEIGHT;
		this.collidable = collidable;
		this.brickColor = Color.black;
		gBrick = new Rectangle(x, y, height, width);	
	}
	
	public void destroyBrick(){
		this.brickColor = Color.WHITE;
		collidable = false;
	}
	
	public void updateBrickDimentions(){
		this.width = Constants.BRICKWIDTH;
		this.height = Constants.BRICKHEIGHT;
		x = Constants.SIDEGAP + (columnIndex * this.width) + (columnIndex * Constants.BRICKWIDTHGAP);
		y = Constants.TOPGAP + (rowIndex * this.height) + (rowIndex * Constants.BRICKHEIGHTGAP);
	}
	
	public void drawBrick(Graphics graphics) {
		Graphics2D g = (Graphics2D)graphics.create();
		g.setColor(brickColor);
		g.fill(gBrick);
		g.draw(gBrick);
	}
}



		